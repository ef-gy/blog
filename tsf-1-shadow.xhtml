<?xml version="1.0" encoding="utf-8" ?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
<head>
<title>The Source Fantastic: The Shadow Suite</title>
<meta name="author" content="Magnus Achim Deininger" />
<meta name="description" content="For this first issue of The Source Fantastic, we've picked the shadow suite of programmes, which are currently used on tons of Linux machines to handle log in and user management." />
<meta name="date" content="2014-08-11T00:00:00Z" />
<meta name="mtime" content="2014-08-11T00:00:00Z" />
<meta name="category" content="The Source Fantastic" />
<meta name="unix:name" content="tsf-1-shadow" />
</head>
<body>
<p>For this very first edition of <em>The Source Fantastic</em>, I would like to take you on a little journey. I would like to a take you back to a time before Facebook and Twitter. Just around the time Google was being founded. A time when the internet just started being a thing for real, but most serious discussions still took place on the usenet. When your manager hadn't forced you to migrate SAP away from UNIX to Windows, just yet. A time when you could hook your baby brother on Linux just by handing him a SuSE CD set - thanks, big sis!</p>
<p>The time is the late nineties, and our topic is <em>the shadow suite</em>. <cite>Julianne Frances Haugh</cite> had set out about a decade earlier to write this replacement for the <em>login</em> command and all things around it, so naturally the programmes were still considered beta in Debian. Juliannes website at the time is, unfortunately, no longer available. <a href="https://web.archive.org/web/19970701225954/http://www.tab.com/~jfh/">But archive.org still has a copy</a>, so to quote her:</p>
<blockquote address="https://web.archive.org/web/19970701225954/http://www.tab.com/~jfh/"><p>In 1987 I was the victim of a computer hacker and suddenly found the need to learn everything possible about computer security. I started by learning the common tricks hackers used to break into systems and ended up writing the <a href="https://web.archive.org/web/19970701225954/http://www.lh.umu.se/~bjorn/linux/howto/Shadow-Password-HOWTO-3.html">Shadow Password Suite</a>. It is now the defacto standard enhanced security subsystem for free UNIX systems and is probably in use on over 100,000 systems world-wide. I even wrote and presented a <a href="https://web.archive.org/web/19970701225954/http://www.tab.com/~jfh/shadow-970524.html">paper</a> at a USENIX conference on it. If you are interested in using the Shadow Password Suite on your own system, you can get a copy <a href="https://web.archive.org/web/19970701225954/http://www.tab.com/~jfh/shadow-970216.tar.gz">here</a>. I have written and presented papers or discussions at a couple of conferences and look forward to possibly meeting some of you at a security conference some time in the future. [...]</p></blockquote>
<p>Written out of necessity, this package is actually a very good example of well-written C code - which in itself is a rare enough feat to warrant a closer look, but doubly so given the time it was written in. More modern versions of the package are still in use on modern Linux systems, however releases after roughly 2000 did change the copyright to no longer directly name Julianne. For the following, I've picked three particularly well done pieces of the <em>19990827</em> release.</p>
<h1>Source Structure</h1>
<p>C code is somewhat notorious for being hard to read and intimidating, which might make it a rather bold choice for the first issue of this series. This is quite likely due to typical C projects not really having documented source code. This project isn't one of them. Let's have a look at a random sample function.</p>
<pre><code><![CDATA[/*
 * yes_or_no - get answer to question from the user
 */

static int
yes_or_no(void)
{
	char buf[80];

	/*
	 * In read-only mode all questions are answered "no".
	 */

	if (read_only) {
		puts(_("No"));
		return 0;
	}

	/*
	 * Get a line and see what the first character is.
	 */

	if (fgets(buf, sizeof buf, stdin))
		return buf[0] == 'y' || buf[0] == 'Y';

	return 0;
}]]></code></pre>
<p>Why is this code awesome? Because it's easy to read. You just know <em>exactly</em> what's going on. And if you don't, the comments will clear everything right up. It's also a very short function with a clear name, which means that whenever it's used later it's clear what the function call does. Want another example? Sure you do:</p>
<pre><code><![CDATA[/*
 * check_login - check if user (struct utmp) allowed to stay logged in
 */
static int
check_login(const struct utmp *ut)
{
	char user[sizeof(ut->ut_user) + 1];
	time_t now;

	/*
	 * ut_user may not have the terminating NUL.
	 */
	strncpy(user, ut->ut_user, sizeof(ut->ut_user));
	user[sizeof(ut->ut_user)] = '\0';

	time(&now);

	/*
	 * Check if they are allowed to be logged in right now.
	 */
	if (!isttytime(user, ut->ut_line, now))
		return 0;
#if 0
	/*
	 * Check for how long they are allowed to stay logged in.
	 * XXX - not implemented yet.  Need to add a new field to
	 * /etc/porttime (login time limit in minutes, or no limit,
	 * based on username, tty, and time of login).
	 */
	if (now - ut->ut_time > get_time_limit(user, ut->ut_line, ut->ut_time))
		return 0;
#endif
	return 1;
}]]></code></pre>
<p>Yes, this one has scary data structures. But it's still written the same way as the previous one: short, concise and with lots of comments. Even with scary data types you still know exactly what's going on, and if you see this function used later then you know precisely what it does. That's why this is an example of good code - even though it's C.</p>
<p>Also worth pointing out is that the function is properly declared as <em>static</em>, because it's a small helper function that does not need to be available for linking externally. Which in this case leads right to the next bit.</p>
<h1>Source Layout</h1>
<p>We've lost something over the years. A very simple yet terribly effective thing. Back in the olden days, there used to be a principle: <em>do one thing and do it well</em>. This used to lead to very short, concise programmes that had a very narrowly defined function to perform. This package is a testament to that - and why it's a good thing to begin with!</p>
<p>In this particular package, we have 32 C files in the <em>src/</em> directory:</p>
<pre><code>shadow-19990827 $ ls -lah src/*.c|wc
      32     288    2248
</code></pre>
<p>How many of these are programmes? Well...</p>
<pre><code>shadow-19990827 $ grep -r "int main" src/|wc
      32     160    1384
</code></pre>
<p>... all of them! Every little major of functionality has its own, dedicated programme. You've got one to handle logins, one each for adding, removing and changing groups, one to echo user IDs, and handful to handle log entries. And the list keeps on going like that. Every little thing a user can do has its own programme. Some of these programmes are shorter than 200 lines - including comments! I bet you've seen single functions longer than that.</p>
<p>Of course there's a few additional source files with helper functions, but all of those are pretty short:</p>
<pre><code>shadow-19990827 $ wc lib/*.c
     739    1708   12232 lib/commonio.c
      77     387    2480 lib/dialchk.c
     169     617    3842 lib/dialup.c
     123     566    3547 lib/encrypt.c
      80     400    2384 lib/fputsx.c
     402    1426    9240 lib/getdef.c
     296    1013    6635 lib/getpass.c
     211     766    5121 lib/grdbm.c
     185     377    2845 lib/groupio.c
      95     441    2722 lib/grpack.c
     167     617    4035 lib/gsdbm.c
     528    1638   10367 lib/gshadow.c
     150     696    4069 lib/gspack.c
     114     428    2605 lib/lockpw.c
     261    1382    8135 lib/md5.c
     151     527    3719 lib/md5crypt.c
      60     324    2073 lib/mkdir.c
     439    1858   10759 lib/port.c
      75     384    2448 lib/putgrent.c
      72     401    2681 lib/putpwent.c
     103     470    2975 lib/putspent.c
     578    2228   13932 lib/pwauth.c
     143     538    3490 lib/pwdbm.c
     187     375    3014 lib/pwio.c
     163     662    4198 lib/pwpack.c
     126     533    2861 lib/rad64.c
      91     465    2808 lib/rename.c
      59     318    2040 lib/rmdir.c
     140     661    4002 lib/sgetgrent.c
     136     653    3991 lib/sgetpwent.c
     198     876    5181 lib/sgetspent.c
     213     444    3419 lib/sgroupio.c
     592    1944   11963 lib/shadow.c
     172     325    2516 lib/shadowio.c
     320    1072    9412 lib/snprintf.c
     116     427    2781 lib/spdbm.c
     113     479    3381 lib/sppack.c
      25      61     399 lib/strcasecmp.c
      16      36     256 lib/strdup.c
      23      55     429 lib/strerror.c
      55     315    1974 lib/strstr.c
      90     126    1113 lib/tcfsio.c
     114     459    2891 lib/utent.c
    8167   29478  190965 total
</code></pre>
<p>Not only are they short, but a very significant portion of those lines are actually comments. Not that 8000 lines is very long to begin with.</p>
<p>This layout is great, because you can easily understand what an individual programme does if it's short, concise and has a very specific thing that it's supposed to do. Conversely, the longer a programme gets or the more features you add, the harder it becomes to understand. And whenever that happens you automatically make people shy away from fixing things if they're broken or contributing improvements - people will instead try to find funky workarounds that nobody understands, or they'll just switch to a different project with the same scope instead.</p>
<p>Take a gander why this one's still in use, even today.</p>
<h1>Handcrafted Man Pages</h1>
<p>Even if your code is mostly self-documenting, you still need to help your users figure out how to use it. Back in the olden days, that used to be done with man pages. Of which there are plenty bundled with this project:</p>
<pre><code>shadow-19990827 $ ls man/*.[0-9]|wc
      40      40     542
</code></pre>
<p>Not only are there man pages for every major aspect of the project, you can even tell that they've been written manually. Let's have a look at a short one:</p>
<pre><code>.\" Copyright 1989 - 1990, Julianne Frances Haugh
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of Julianne F. Haugh nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY JULIE HAUGH AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL JULIE HAUGH OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     $Id: su.1,v 1.5 1998/12/28 20:35:26 marekm Exp $
.\"
.TH SU 1
.SH NAME
su \- Change user ID or become super-user
.SH SYNOPSIS
.BR su " [" - ]
.RI [ username " [" args ]]
.SH DESCRIPTION
.B su
is used to become another user during a login session.
Invoked without a username, \fBsu\fR defaults to becoming
the super user.
The optional argument \fB\-\fR may be used to provide an
environment similiar to what the user would expect had
the user logged in directly.
.PP
Additional arguments may be provided after the username,
in which case they are supplied to the user\'s login shell.
In particular, an argument of \fB-c\fR will cause the
next argument to be treated as a command by most command
interpreters.
.\" The command will be executed under the shell specified by
.\" \fB$SHELL\fR, or if undefined, by the one specified in
.\" \fI/etc/passwd\fR.
.\" XXX - the above was not quite correct.  --marekm
The command will be executed by the shell specified in
\fI/etc/passwd\fR for the target user.
.PP
The user will be prompted for a password, if appropriate.
Invalid passwords will produce an error message.
All attempts, both valid and invalid, are logged to detect
abuses of the system.
.PP
The current environment is passed to the new shell.  The value of
\fB$PATH\fR is reset to \fB/bin:/usr/bin\fR for normal users, or
\fB/sbin:/bin:/usr/sbin:/usr/bin\fR for the super user.  This may be
changed with the \fBENV_PATH\fR and \fBENV_SUPATH\fR definitions in
\fI/etc/login.defs\fR.
.SH CAVEATS
.PP
This version of \fBsu\fR has many compilation options, only some of which
may be in use at any particular site.
.SH Files
/etc/passwd \- user account information
.br
/etc/shadow \- encrypted passwords and age information
.br
$HOME/.profile \- initialization script for default shell
.SH SEE ALSO
.BR login (1),
.BR sh (1),
.BR suauth (5),
.BR login.defs (5)
.SH AUTHOR
Julianne Frances Haugh (jfh@bga.com)
</code></pre>
<p>Ever seen a generated man page? They sure don't look like that. But how can you tell this is a man page that was written by hand? Well, the <em>XXX</em> comment near the end that marks an item that still needs to be cleaned up is a pretty good indication that a human actually wrote this and not something else that was translated to a man page. It also doesn't look very scary, nor does it have a lot of extremely specific macros to mangle the formatting in there.</p>
<p>Man pages are good for several reasons. For one thing, they're very UNIX-y. Which is good for a project designed to be used on unices. Man pages are the standard, and preferred way of getting information, since you don't need to guess which flag will trigger the built in help screen of a command. Man pages also provide a good way of documenting additional details about the implementation of a programme that just don't make sense in other contexts. They have a standard format that people are used to and unlike some would-be replacements like <em>Texinfo</em> you don't get confused by the online reader. Oh and, of course there's also man pages for the format of the configuration files and the like.</p>
<p>Additional documentation, such as README files are, of course, also provided. Nothing like being able to read more about a project when you're trying to figure out how it works or how to use it.</p>
<h1>Where To Go From Here</h1>
<p>Want to browse the sources for yourself? Might be a bit tricky to find 'em alright, there doesn't seem to be a current home page. <a href="http://pkgs.fedoraproject.org/repo/pkgs/shadow-utils/">Luckily Fedora has a mirror of quite a few releases on their servers</a>.</p>
<p><a href="https://web.archive.org/web/19970701225954/http://www.tab.com/~jfh/">archive.org also happens to have a copy of Julianne's old website from the late nineties</a>, along with <a href="https://web.archive.org/web/19970701225954/http://www.lh.umu.se/~bjorn/linux/howto/Shadow-Password-HOWTO-3.html">the old Linux Shadow Password HOWTO</a>.</p>
<p> Hope you enjoyed this first issue of <em>The Source Fantastic</em>; stay tuned for the next issue which will be posted on Monday the 25th of August. General commentary and vitriol is, as always, welcome in the comments below or via email.</p>
</body>
</html>
