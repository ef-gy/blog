<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
<title>Tesseract - 4D Hypercube</title>
<desc>An interactive perspective projection of a wireframe 4-cube to 3-space, with a subsequent perspective projection of the result into 2-space.</desc>
<style type="text/css"><![CDATA[text
{
    font-family: sans-serif;
}

svg
{
    background: white;
}

#output line, #axis4 line, #axis3 line
{
    stroke: black;
    stroke-width: 0.01;
}

#axis4 line, #axis3 line
{
    stroke-width: 0.1;
}

#name rect
{
    stroke-width: 1;
    fill: rgba(50,50,100,0.3);
}

#axis3 line
{
    stroke: purple;
}

#axis4 line
{
    stroke: blue;
}]]></style>

<svg x="1" y="1" width="100%" height="100%" viewBox="-2 -2 4 4">
<g id="output" />
</svg>

<svg x="0" y="0" height="8em" width="100%" id="name">
<rect x="0" y="0" height="8em" width="100%" />
<text x="10em" y="1.2em" font-size="2em">Tesseract <tspan fill="#fff" font-size="0.7em">4D Hypercube</tspan></text>
<line x1="18em" y1="3.2em" x2="100%" y2="3.2em" stroke="black" stroke-width="0.05em" />
<text x="23em" y="5.3em" font-size="0.9em">A hypercube, or n-cube, is a generalisation of a cube to an n-dimensional space. Shown below is a 4-cube.</text>
<text x="23em" y="6.5em" font-size="0.9em">Rotate the 4D camera by dragging the left mouse button. Hold ALT while dragging to change axes.</text>
<text x="23em" y="7.7em" font-size="0.9em">Drag with the middle mouse button to rotate the 3D camera. <a xlink:href="http://ef.gy/" fill="#33a">Visit http://ef.gy/ for more info.</a></text>

<svg x="1em" y="0.5em" height="7em" width="7em" viewBox="-2.5 -2.5 5 5" id="hud1">
<g id="axis3" />
</svg>

<svg x="8em" y="0.5em" height="7em" width="7em" viewBox="-2.5 -2.5 5 5" id="hud2">
<g id="axis4" />
</svg>

<text x="0.5em" y="1.2em">3D Axes</text>
<text x="8em" y="1.2em">4D Axes</text>

<line x1="0" y1="8em" x2="100%" y2="8em" stroke="black" stroke-width="0.2em" />
</svg>

<script type="application/ecmascript" xlink:href="/js/tesseract" />

<script type="application/ecmascript"><![CDATA[
var updateProjection = Module.cwrap('updateProjection', 'number', []);
var getProjection = Module.cwrap('getProjection', 'string', []);
var getAxisGraph3 = Module.cwrap('getAxisGraph3', 'string', []);
var getAxisGraph4 = Module.cwrap('getAxisGraph4', 'string', []);
var addOrigin3 = Module.cwrap ('addOrigin3', 'number', ['number', 'number']);
var setOrigin3 = Module.cwrap ('setOrigin3', 'number', ['number', 'number']);
var addOrigin4 = Module.cwrap ('addOrigin4', 'number', ['number', 'number', 'number']);
var setOrigin4 = Module.cwrap ('setOrigin4', 'number', ['number', 'number', 'number']);

function initialise()
{
    function renderWireframe(output, JSONData)
    {
        var data = eval(JSONData);

        for (i = 1; i < data.length; i++)
        {
            var newNode = document.createElementNS ('http://www.w3.org/2000/svg', 'line');

            newNode.setAttributeNS (null, 'x1', data[i]['x1']);
            newNode.setAttributeNS (null, 'x2', data[i]['x2']);
            newNode.setAttributeNS (null, 'y1', data[i]['y1']);
            newNode.setAttributeNS (null, 'y2', data[i]['y2']);

            output.appendChild (newNode);
        }
    }

    function render()
    {
        var r = updateProjection();

        var output = document.getElementById('output');

        while (output.hasChildNodes())
        {
            output.removeChild(output.lastChild);
        }

        renderWireframe (output, getProjection());

        output = document.getElementById('axis3');

        while (output.hasChildNodes())
        {
            output.removeChild(output.lastChild);
        }

        renderWireframe (output, getAxisGraph3());

        output = document.getElementById('axis4');

        while (output.hasChildNodes())
        {
            output.removeChild(output.lastChild);
        }

        renderWireframe (output, getAxisGraph4());
    }

    var output = document.getElementById('output');
    var leftDown = false;
    var otherDown = false;
    var lastMouseX = 0;
    var lastMouseY = 0;

    function processMouseDown(e)
    {
        if (e.button == 0)
        {
            leftDown = true;
        }
        else
        {
            otherDown = true;
        }
    }

    function processMouseUp(e)
    {
        if (e.button == 0)
        {
            leftDown = false;
        }
        else
        {
            otherDown = false;
        }
    }

    function processMove(e)
    {
        var x = e.clientX - lastMouseX;
        var y = e.clientY - lastMouseY;

        if (leftDown)
        {
            if (e.altKey)
            {
                addOrigin4(0, -x, y);
            }
            else
            {
                addOrigin4(-x, 0, y);
            }

            render();
        }

        if (otherDown)
        {
            addOrigin3(-x, -y);

            render();
        }

        lastMouseX = e.clientX;
        lastMouseY = e.clientY;
    }

    document.onmousedown = processMouseDown;
    document.onmouseup = processMouseUp;
    document.onmousemove = processMove;

    render();
}

initialise();
]]></script>

</svg>
